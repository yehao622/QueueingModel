//
// Generated file, do not edit! Created by nedtool 5.6 from Job.msg.
//

#ifndef __JOB_M_H
#define __JOB_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Job.msg:21</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message Job
 * {
 *     //\@customize(true);  			// see the generated C++ header for more info
 *     bool cached;
 *     bool back_from_ost;
 *     char work_type;
 *     int assigned_oss_id;
 *     unsigned int job_id;
 *     uint64_t init_data_size;
 *     //    simtime_t cur_time; 		// current simulating time stamp
 *     simtime_t arrive_time_queue;
 *     simtime_t leave_time_queue;
 *     simtime_t arrive_time_server;
 *     simtime_t leave_time_server;
 *     omnetpp::cPacket pkg;
 * }
 * </pre>
 */
class Job : public ::omnetpp::cMessage
{
  protected:
    bool cached;
    bool back_from_ost;
    char work_type;
    int assigned_oss_id;
    unsigned int job_id;
    uint64_t init_data_size;
    ::omnetpp::simtime_t arrive_time_queue;
    ::omnetpp::simtime_t leave_time_queue;
    ::omnetpp::simtime_t arrive_time_server;
    ::omnetpp::simtime_t leave_time_server;
    omnetpp::cPacket pkg;

  private:
    void copy(const Job& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Job&);

  public:
    Job(const char *name=nullptr, short kind=0);
    Job(const Job& other);
    virtual ~Job();
    Job& operator=(const Job& other);
    virtual Job *dup() const override {return new Job(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getCached() const;
    virtual void setCached(bool cached);
    virtual bool getBack_from_ost() const;
    virtual void setBack_from_ost(bool back_from_ost);
    virtual char getWork_type() const;
    virtual void setWork_type(char work_type);
    virtual int getAssigned_oss_id() const;
    virtual void setAssigned_oss_id(int assigned_oss_id);
    virtual unsigned int getJob_id() const;
    virtual void setJob_id(unsigned int job_id);
    virtual uint64_t getInit_data_size() const;
    virtual void setInit_data_size(uint64_t init_data_size);
    virtual ::omnetpp::simtime_t getArrive_time_queue() const;
    virtual void setArrive_time_queue(::omnetpp::simtime_t arrive_time_queue);
    virtual ::omnetpp::simtime_t getLeave_time_queue() const;
    virtual void setLeave_time_queue(::omnetpp::simtime_t leave_time_queue);
    virtual ::omnetpp::simtime_t getArrive_time_server() const;
    virtual void setArrive_time_server(::omnetpp::simtime_t arrive_time_server);
    virtual ::omnetpp::simtime_t getLeave_time_server() const;
    virtual void setLeave_time_server(::omnetpp::simtime_t leave_time_server);
    virtual omnetpp::cPacket& getPkg();
    virtual const omnetpp::cPacket& getPkg() const {return const_cast<Job*>(this)->getPkg();}
    virtual void setPkg(const omnetpp::cPacket& pkg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Job& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Job& obj) {obj.parsimUnpack(b);}


#endif // ifndef __JOB_M_H

